@page "/fetchdata"
@using BlazorWeatherApp.Shared
@inject HttpClient Http

<PageTitle>Weather Forecasts</PageTitle>

<h1>Weather Forecasts Across Locations</h1>
<p>This page displays weather forecasts, with critical conditions highlighted for immediate attention.</p>

@if (forecasts == null)
{
    <p><em>Loading weather data...</em></p>
}
else
{
    <div class="legend mb-4 p-3 rounded-3 shadow-sm bg-light">
        <h4 class="text-primary mb-3">Legend:</h4>
        <div class="d-flex flex-wrap align-items-center">
            <span class="badge bg-danger text-white p-2 rounded-pill me-3 mb-2">
                <i class="bi bi-exclamation-triangle-fill me-1"></i> Dangerous (Freezing / Scorching)
            </span>
            <span class="badge bg-warning text-dark p-2 rounded-pill me-3 mb-2">
                <i class="bi bi-thermometer-half me-1"></i> Harsh (Bracing / Sweltering)
            </span>
            <span class="badge bg-info text-dark p-2 rounded-pill mb-2">
                <i class="bi bi-cloud-fill me-1"></i> Normal Conditions
            </span>
        </div>
    </div>

    <div class="weather-data-container">
        @foreach (var locationGroup in forecasts.GroupBy(f => f.Location).OrderBy(g => g.Key))
        {
            <div class="location-card mb-5 p-4 rounded-4 shadow-lg">
                <h2 class="text-center text-secondary mb-4">Weather in @locationGroup.Key</h2>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-hover align-middle text-center">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">Date</th>
                                <th scope="col">Temp. (C)</th>
                                <th scope="col">Temp. (F)</th>
                                <th scope="col">Summary</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var forecast in locationGroup.OrderBy(f => f.Date))
                            {
                                <tr class="@GetRowClass(forecast)">
                                    <td>@forecast.Date.ToShortDateString()</td>
                                    <td>@forecast.TemperatureC°C</td>
                                    <td>@forecast.TemperatureF°F</td>
                                    <td>
                                        @forecast.Summary
                                        @if (forecast.IsDangerousCondition)
                                        {
                                            <span class="badge bg-danger ms-2 rounded-pill">
                                                <i class="bi bi-exclamation-circle-fill"></i> DANGER!
                                            </span>
                                        }
                                        else if (forecast.IsHarshCondition)
                                        {
                                            <span class="badge bg-warning text-dark ms-2 rounded-pill">
                                                <i class="bi bi-exclamation-triangle-fill"></i> HARSH
                                            </span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

@code {
    private WeatherForecast[]? forecasts;

    // This method is called when the component is initialized.
    // It fetches the weather data from the backend API.
    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        catch (HttpRequestException ex) // Handle potential API call errors
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            // Optionally, set an error message for the user
        }
    }

    // Determines the CSS class for a table row based on weather conditions.
    private string GetRowClass(WeatherForecast forecast)
    {
        if (forecast.IsDangerousCondition)
        {
            return "table-danger fw-bold shadow-sm"; // Bootstrap class for danger, bold text, and subtle shadow
        }
        else if (forecast.IsHarshCondition)
        {
            return "table-warning fw-bold shadow-sm"; // Bootstrap class for warning, bold text, and subtle shadow
        }
        return string.Empty; // No special class for normal conditions
    }
}